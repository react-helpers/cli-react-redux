import { call, put, takeEvery } from 'redux-saga/effects';
import { fetchDataAsync, watch'<NameOf>'Sagas } from '../sagas';
import * as actionType from '../actionTypes';

// ./node_modules/.bin/jest ./src/containers/'<nameof>'/__tests__/sagas.test.js --env=jsdom
describe('<'<NameOf>' /> sagas', () => {
  describe('fetchDataAsync', () => {
    it('ends with fetchDataSuccess if successful API call', () => {
      const generator = fetchDataAsync({ type: actionType.FETCH_DATA_ASYNC });

      const url = 'https://api.github.com';
      expect(generator.next().value).toEqual(call(axios.get, url));

      const resultsMock = { data: { foo: 'bar' } };
      expect(generator.next(resultsMock).value)
        .toEqual(put({
          type: actionType.FETCH_DATA_SUCCESS,
          payload: { results: resultsMock },
        }));

      expect(generator.next().done).toEqual(true);
    });

    it('ends with fetchDataSuccess if successful API call', () => {
      const generator = fetchDataAsync({ type: actionType.FETCH_DATA_ASYNC });

      const url = 'https://api.github.com';
      expect(generator.next().value).toEqual(call(axios.get, url));

      const error = { foo: 'bar' };
      expect(generator.throw(error).value)
        .toEqual(put({ type: actionType.FETCH_DATA_FAILURE, payload: error }));

      expect(generator.next().done).toEqual(true);
    });
  });

  describe('watch'<NameOf>'Sagas', () => {
    it('listens on FETCH_DATA_ASYNC to fire fetchDataAsync', () => {
      const generator = watch'<NameOf>'Sagas();

      expect(generator.next().value)
        .toEqual(takeEvery(actionType.FETCH_DATA_ASYNC, fetchDataAsync));

      expect(generator.next().done).toEqual(true);
    });
  });
});
