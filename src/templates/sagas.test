import { call, put, takeEvery } from 'redux-saga/effects';
import { fetchDataAsync, watch'<NameOf>'Sagas } from '../sagas';
import * as actionType from '../actionTypes';

// ./node_modules/.bin/jest ./src/containers/'<nameof>'/__tests__/sagas.test.js --env=jsdom
describe('<'<NameOf>' /> sagas', () => {
  describe('fetchDataAsync', () => {
    it('ends with fetchDataSuccess if successful API call', () => {
      const generator = fetchDataAsync({
        type: actionType.FETCH_DATA_ASYNC,
      });
      const url = 'https://api.github.com';
      const endpoint = `${url}/`;
      const fetchOpts = { method: 'GET' };
      expect(generator.next().value).toEqual(call(fetch, endpoint, fetchOpts));
      const responseMock = {
        ok: true,
        json: jest.fn(),
      };
      expect(generator.next(responseMock).value)
        .toEqual(call([responseMock, responseMock.json]));
      const resultsMock = { bar: 'foo' };
      expect(generator.next(resultsMock).value)
        .toEqual(put({
          type: actionType.FETCH_DATA_SUCCESS,
          payload: { results: resultsMock },
        }));
      expect(generator.next().done).toEqual(true);
    });

    it('fires fetchDataFailure and reportError if unsuccessful fetch', () => {
      const generator = fetchDataAsync({
        type: actionType.FETCH_DATA_ASYNC
      });
      const url = 'https://api.github.com';
      const endpoint = `${url}/`;
      const fetchOpts = { method: 'GET' };
      expect(generator.next().value).toEqual(call(fetch, endpoint, fetchOpts));
      const responseMock = {
        ok: false,
        status: 400,
        statusText: 'fail',
      };
      const errorMock = new Error(`${responseMock.status} ${responseMock.statusText}`);
      expect(generator.next(responseMock).value)
        .toEqual(put({
          type: actionType.FETCH_DATA_FAILURE,
          payload: { error: errorMock },
        }));
      expect(generator.next().value)
        .toEqual(put({
          type: actionType.REPORT_ERROR,
          payload: { error: errorMock },
        }));
      expect(generator.next().done).toEqual(true);
    });
  });

  describe('watch'<NameOf>'Sagas', () => {
    it('listens on FETCH_DATA_ASYNC to fire fetchDataAsync', () => {
      const generator = watch'<NameOf>'Sagas();
      expect(generator.next().value)
        .toEqual(takeEvery(actionType.FETCH_DATA_ASYNC, fetchDataAsync));
      expect(generator.next().done).toEqual(true);
    });
  });
});
