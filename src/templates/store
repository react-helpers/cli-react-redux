import { compose, createStore, applyMiddleware } from 'redux';
import createSagaMiddleware from 'redux-saga';
import { routerMiddleware } from 'react-router-redux';
import createHistory from 'history/createBrowserHistory'; // eslint-disable-line
import rootReducer from './rootReducer';
import rootSaga from './rootSaga';

export const rdx = {
  initialState: {},
  enhancers: [],
  history: undefined,
  store: undefined,
  createHistory,
  sagaMiddleware: undefined,
  createSagaMiddleware,
  middleware: undefined,
  routerMiddleware,
  appliedMiddleware: undefined,
  compose,
  composedEnhancers: undefined,
  applyMiddleware,
  createStore,
  rootReducer,
  rootSaga,
}

export default function configureStore() {
  rdx.history = rdx.createHistory();

  rdx.sagaMiddleware = rdx.createSagaMiddleware();
  rdx.middleware = [
    rdx.sagaMiddleware,
    rdx.routerMiddleware(rdx.history),
  ];

  if (process.env.NODE_ENV === 'development') {
    const { devToolsExtension } = window;
    if (typeof devToolsExtension === 'function') {
      rdx.enhancers.push(devToolsExtension());
    }
  }

  rdx.appliedMiddleware = rdx.applyMiddleware(...rdx.middleware);
  rdx.composedEnhancers = rdx.compose(
    rdx.appliedMiddleware,
    ...rdx.enhancers,
  );

  rdx.store = rdx.createStore(
    rdx.rootReducer(),
    rdx.initialState,
    rdx.composedEnhancers,
  );

  rdx.sagaMiddleware.run(rdx.rootSaga);
}
rdx.configureStore = configureStore;

export function getStore() {
  if (!rdx.store) {
    rdx.configureStore();
  }
  return rdx.store;
}
rdx.getStore = getStore;

export function getHistory() {
  return rdx.history;
}
rdx.getHistory = getHistory;
